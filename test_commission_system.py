#!/usr/bin/env python3
"""
Script de teste para validar o sistema de comiss√µes parceladas do Beepy
"""

import requests
import json
from datetime import datetime, timedelta
import sys

# Configura√ß√µes
API_BASE_URL = "http://localhost:10000"
TEST_USER_EMAIL = "admin@beepy.com"
TEST_USER_PASSWORD = "admin123"

class BeepyTester:
    def __init__(self):
        self.session = requests.Session()
        self.token = None
        self.user_id = None
        
    def login(self):
        """Realiza login no sistema"""
        print("üîê Realizando login...")
        
        login_data = {
            "email": TEST_USER_EMAIL,
            "password": TEST_USER_PASSWORD
        }
        
        try:
            response = self.session.post(
                f"{API_BASE_URL}/auth/login",
                json=login_data,
                headers={"Content-Type": "application/json"}
            )
            
            if response.status_code == 200:
                data = response.json()
                self.token = data.get("access_token")
                self.user_id = data.get("user", {}).get("id")
                print(f"‚úÖ Login realizado com sucesso! User ID: {self.user_id}")
                return True
            else:
                print(f"‚ùå Erro no login: {response.status_code} - {response.text}")
                return False
                
        except Exception as e:
            print(f"‚ùå Erro na conex√£o: {e}")
            return False
    
    def get_headers(self):
        """Retorna headers com autentica√ß√£o"""
        return {
            "Authorization": f"Bearer {self.token}",
            "Content-Type": "application/json"
        }
    
    def create_test_indication(self):
        """Cria uma indica√ß√£o de teste"""
        print("\nüìù Criando indica√ß√£o de teste...")
        
        indication_data = {
            "clientName": "Cliente Teste Comiss√£o",
            "clientEmail": "cliente.teste@email.com",
            "clientPhone": "(11) 99999-9999",
            "origin": "website",
            "segment": "tecnologia"
        }
        
        try:
            response = self.session.post(
                f"{API_BASE_URL}/indications",
                json=indication_data,
                headers=self.get_headers()
            )
            
            if response.status_code == 201:
                data = response.json()
                indication_id = data.get("id")
                print(f"‚úÖ Indica√ß√£o criada com sucesso! ID: {indication_id}")
                return indication_id
            else:
                print(f"‚ùå Erro ao criar indica√ß√£o: {response.status_code} - {response.text}")
                return None
                
        except Exception as e:
            print(f"‚ùå Erro na cria√ß√£o da indica√ß√£o: {e}")
            return None
    
    def approve_indication(self, indication_id):
        """Aprova uma indica√ß√£o para gerar comiss√µes"""
        print(f"\n‚úÖ Aprovando indica√ß√£o {indication_id}...")
        
        try:
            response = self.session.put(
                f"{API_BASE_URL}/indications/{indication_id}/status",
                json={"status": "aprovado"},
                headers=self.get_headers()
            )
            
            if response.status_code == 200:
                print("‚úÖ Indica√ß√£o aprovada com sucesso!")
                return True
            else:
                print(f"‚ùå Erro ao aprovar indica√ß√£o: {response.status_code} - {response.text}")
                return False
                
        except Exception as e:
            print(f"‚ùå Erro na aprova√ß√£o da indica√ß√£o: {e}")
            return False
    
    def get_commissions(self):
        """Busca todas as comiss√µes"""
        print("\nüí∞ Buscando comiss√µes...")
        
        try:
            response = self.session.get(
                f"{API_BASE_URL}/commissions",
                headers=self.get_headers()
            )
            
            if response.status_code == 200:
                data = response.json()
                if data.get("success"):
                    commissions = data.get("commissions", [])
                    print(f"‚úÖ Encontradas {len(commissions)} comiss√µes")
                    return commissions
                else:
                    print(f"‚ùå Erro na resposta: {data.get('message')}")
                    return []
            else:
                print(f"‚ùå Erro ao buscar comiss√µes: {response.status_code} - {response.text}")
                return []
                
        except Exception as e:
            print(f"‚ùå Erro na busca de comiss√µes: {e}")
            return []
    
    def validate_commission_parcels(self, commissions, indication_id):
        """Valida se as 3 parcelas foram criadas corretamente"""
        print(f"\nüîç Validando parcelas para indica√ß√£o {indication_id}...")
        
        # Filtrar comiss√µes da indica√ß√£o espec√≠fica
        indication_commissions = [c for c in commissions if c.get("indication_id") == indication_id]
        
        if len(indication_commissions) != 3:
            print(f"‚ùå Erro: Esperadas 3 parcelas, encontradas {len(indication_commissions)}")
            return False
        
        # Verificar se todas as parcelas t√™m R$ 300,00
        for i, commission in enumerate(indication_commissions, 1):
            amount = commission.get("amount", 0)
            parcel_number = commission.get("parcel_number", 0)
            status = commission.get("payment_status", "")
            due_date = commission.get("due_date", "")
            
            print(f"  Parcela {parcel_number}: R$ {amount:.2f} - Status: {status} - Vencimento: {due_date}")
            
            if amount != 300.0:
                print(f"‚ùå Erro: Parcela {parcel_number} deveria ter R$ 300,00, mas tem R$ {amount:.2f}")
                return False
            
            if status != "pendente":
                print(f"‚ùå Erro: Parcela {parcel_number} deveria estar pendente, mas est√° {status}")
                return False
        
        print("‚úÖ Todas as parcelas est√£o corretas!")
        return True
    
    def test_commission_status_update(self, commissions, indication_id):
        """Testa a atualiza√ß√£o de status de uma comiss√£o"""
        print(f"\nüîÑ Testando atualiza√ß√£o de status...")
        
        # Pegar a primeira parcela da indica√ß√£o
        indication_commissions = [c for c in commissions if c.get("indication_id") == indication_id]
        if not indication_commissions:
            print("‚ùå Nenhuma comiss√£o encontrada para testar")
            return False
        
        commission_id = indication_commissions[0].get("id")
        
        try:
            # Marcar como pago
            response = self.session.put(
                f"{API_BASE_URL}/commissions/{commission_id}",
                json={"payment_status": "pago"},
                headers=self.get_headers()
            )
            
            if response.status_code == 200:
                print("‚úÖ Status atualizado para 'pago' com sucesso!")
                
                # Verificar se a atualiza√ß√£o foi persistida
                updated_commissions = self.get_commissions()
                updated_commission = next((c for c in updated_commissions if c.get("id") == commission_id), None)
                
                if updated_commission and updated_commission.get("payment_status") == "pago":
                    print("‚úÖ Status persistido corretamente!")
                    return True
                else:
                    print("‚ùå Status n√£o foi persistido corretamente")
                    return False
            else:
                print(f"‚ùå Erro ao atualizar status: {response.status_code} - {response.text}")
                return False
                
        except Exception as e:
            print(f"‚ùå Erro na atualiza√ß√£o de status: {e}")
            return False
    
    def run_tests(self):
        """Executa todos os testes"""
        print("üöÄ Iniciando testes do sistema de comiss√µes parceladas...")
        print("=" * 60)
        
        # 1. Login
        if not self.login():
            print("‚ùå Falha no login. Encerrando testes.")
            return False
        
        # 2. Criar indica√ß√£o
        indication_id = self.create_test_indication()
        if not indication_id:
            print("‚ùå Falha na cria√ß√£o da indica√ß√£o. Encerrando testes.")
            return False
        
        # 3. Aprovar indica√ß√£o (deve gerar comiss√µes)
        if not self.approve_indication(indication_id):
            print("‚ùå Falha na aprova√ß√£o da indica√ß√£o. Encerrando testes.")
            return False
        
        # 4. Buscar comiss√µes
        commissions = self.get_commissions()
        if not commissions:
            print("‚ùå Nenhuma comiss√£o encontrada. Encerrando testes.")
            return False
        
        # 5. Validar parcelas
        if not self.validate_commission_parcels(commissions, indication_id):
            print("‚ùå Falha na valida√ß√£o das parcelas. Encerrando testes.")
            return False
        
        # 6. Testar atualiza√ß√£o de status
        if not self.test_commission_status_update(commissions, indication_id):
            print("‚ùå Falha no teste de atualiza√ß√£o de status.")
            return False
        
        print("\n" + "=" * 60)
        print("üéâ Todos os testes passaram com sucesso!")
        print("‚úÖ Sistema de comiss√µes parceladas est√° funcionando corretamente!")
        return True

def main():
    """Fun√ß√£o principal"""
    tester = BeepyTester()
    
    try:
        success = tester.run_tests()
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è Testes interrompidos pelo usu√°rio")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Erro inesperado: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()

